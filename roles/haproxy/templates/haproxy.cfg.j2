global
  log /dev/log  local0
  log /dev/log  local1 notice
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin
  stats timeout 30s
  user haproxy
  group haproxy
  daemon

  # Default SSL material locations
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private

  tune.ssl.default-dh-param 2048
  ssl-default-bind-options no-sslv3
  # Default ciphers to use on SSL-enabled listening sockets.
  # For more information, see ciphers(1SSL).
  ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA


  # maxconn 512

defaults
  log global
  mode  http
  stats enable
  stats uri /haproxy?stats
  option httplog
  option forwardfor header X-Forwarded-For
  option http-server-close
  option dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

frontend front_web
  bind *:{{ haproxy_port }}
{% if host_ssl | default(false) %}
  bind *:{{ haproxy_ssl_port}} ssl no-sslv3
  {%- for settings in websites %}{% if settings.ssl | default(false) %} crt /etc/ssl/webserver-certs/{{ settings.domain }}.crt{% endif %}{% endfor %}

{% endif %}

  # Add a header for which protocol has been forwarded
  http-request set-header X-Forwarded-Proto http  if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if  { ssl_fc }

  # Check if the requested host requires SSL
  acl host_needs_ssl hdr(host) -i example.com
{%- for settings in websites %}
{% if settings.ssl | default(false) %} {{ settings.domain }}{% endif %}
{% endfor %}

  # Only redirect to HTTPS if the host needs it, and we're not using it currently
  redirect scheme https if !{ ssl_fc } host_needs_ssl

  acl static_content path_end .jpg .jpeg .ico .pdf .gif .png .css .js .htm .html
  acl varnish_available nbsrv(back_varnish) ge 1

{% for settings in websites %}
  # Config for {{ settings.domain }}
  acl host_{{ settings.domain }} req.hdr(host) -i {{ settings.domain }}
  acl varnish_available_{{ settings.domain }} nbsrv(back_varnish_{{ settings.domain }}) ge 1
  acl web_available_{{ settings.domain }} nbsrv(back_web_{{ settings.domain }}) ge 1
  use_backend back_varnish_{{ settings.domain }} if static_content host_{{ settings.domain }} varnish_available_{{ settings.domain }}
  use_backend back_web_{{ settings.domain }} if host_{{ settings.domain }} web_available_{{ settings.domain }}

{% endfor %}

  # If this site isn't configured, fall back to default varnish/web hosts
  use_backend back_varnish if varnish_available static_content
  default_backend back_webserver

backend back_varnish
  server varnish01 127.0.0.1:8080 check

backend back_webserver
  server nginx01 127.0.0.1:8081 check
{% for settings in websites %}

# Backends for {{ settings.domain }}
backend back_varnish_{{ settings.domain }}
  server varnish_{{ settings.domain }} 127.0.0.1:8081 check
  option httpchk HEAD /fpm-status HTTP/1.1\r\nUser-Agent:HAProxy\r\nHost:{{ settings.domain }}
backend back_web_{{ settings.domain }}
  server nginx_{{ settings.domain }} 127.0.0.1:8081 check
  option httpchk HEAD /fpm-status HTTP/1.1\r\nUser-Agent:HAProxy\r\nHost:{{ settings.domain }}
{% endfor %}
