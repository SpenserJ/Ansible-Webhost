global
  log /dev/log  local0
  log /dev/log  local1 notice
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin
  stats timeout 30s
  user haproxy
  group haproxy
  daemon

  # Default SSL material locations
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private

  # Default ciphers to use on SSL-enabled listening sockets.
  # For more information, see ciphers(1SSL).
  ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

  # maxconn 512

defaults
  log global
  mode  http
  stats enable
  stats uri /haproxy?stats
  option httplog
  option forwardfor header X-Forwarded-For
  option http-server-close
  option dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

frontend front_web
  bind *:{{ haproxy_port }}
  bind *:{{ haproxy_ssl_port }} ssl crt /etc/ssl/certs/donshobbyshop.ca.pem

  # Add a header for which protocol has been forwarded
  http-request set-header X-Forwarded-Proto http  if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if  { ssl_fc }

  # Check if the requested host requires SSL
  acl host_needs_ssl hdr(host) -i example.com
{%- for domain, settings in websites.iteritems() %}
{% if settings.ssl | default(false) %} {{ domain | replace('__hostname__', hostname) }}{% endif %}
{% endfor %}

  # Only redirect to HTTPS if the host needs it, and we're not using it currently
  redirect scheme https if !{ ssl_fc } host_needs_ssl

  acl static_content path_end .jpg .jpeg .ico .pdf .gif .png .css .js .htm .html
  acl varnish_available nbsrv(back_varnish) ge 1

{% for domain, settings in websites.iteritems() %}
  # Config for {{ domain | replace('__hostname__', hostname) }}
  acl host_{{ domain | replace('__hostname__', hostname) }} req.hdr(host) -i {{ domain | replace('__hostname__', hostname) }}
  acl varnish_available_{{ domain | replace('__hostname__', hostname) }} nbsrv(back_varnish_{{ domain | replace('__hostname__', hostname) }}) ge 1
  acl web_available_{{ domain | replace('__hostname__', hostname) }} nbsrv(back_web_{{ domain | replace('__hostname__', hostname) }}) ge 1
  use_backend back_varnish_{{ domain | replace('__hostname__', hostname) }} if static_content host_{{ domain | replace('__hostname__', hostname) }} varnish_available_{{ domain | replace('__hostname__', hostname) }}
  use_backend back_web_{{ domain | replace('__hostname__', hostname) }} if host_{{ domain | replace('__hostname__', hostname) }} web_available_{{ domain | replace('__hostname__', hostname) }}

{% endfor %}

  # If this site isn't configured, fall back to default varnish/web hosts
  use_backend back_varnish if varnish_available static_content
  default_backend back_webserver

backend back_varnish
  server varnish01 127.0.0.1:8080 check

backend back_webserver
  server nginx01 127.0.0.1:8081 check
{% for domain, settings in websites.iteritems() %}

# Backends for {{ domain | replace('__hostname__', hostname) }}
backend back_varnish_{{ domain | replace('__hostname__', hostname) }}
  server varnish_{{ domain | replace('__hostname__', hostname) }} 127.0.0.1:8081 check
  option httpchk HEAD /fpm-status HTTP/1.1\r\nUser-Agent:HAProxy\r\nHost:{{ domain | replace('__hostname__', hostname) }}
backend back_web_{{ domain | replace('__hostname__', hostname) }}
  server nginx_{{ domain | replace('__hostname__', hostname) }} 127.0.0.1:8081 check
  option httpchk HEAD /fpm-status HTTP/1.1\r\nUser-Agent:HAProxy\r\nHost:{{ domain | replace('__hostname__', hostname) }}
{% endfor %}
